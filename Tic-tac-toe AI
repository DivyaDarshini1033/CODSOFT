import math
import random
import time

class TicTacToeAI:
    def __init__(self):
        # Game board and state management
        self.board = [' ' for _ in range(9)]
        self.difficulty = 'hard'

    def clear_screen(self):
        """Simulate clearing the screen for a cleaner interface."""
        print("\n" * 50)

    def print_welcome_banner(self):
        """Display a welcome screen."""
        print("Welcome to ULTIMATE TIC TAC TOE")
        print("Prepare for an epic battle of wits!")
        time.sleep(1)

    def print_board(self):
        """Render the board with a clean layout."""
        self.clear_screen()
        print("\n Tic Tac Toe Board \n")
        for i in range(0, 9, 3):
            row = self.board[i:i+3]
            print(" | ".join([
                cell if cell in ['X', 'O'] else str(i+j) 
                for j, cell in enumerate(row)
            ]))
            if i < 6:
                print("-" * 9)
        print()

    def set_difficulty(self):
        """Allow user to choose game difficulty."""
        print("\nChoose Difficulty:")
        print("1. Easy (Random Moves)")
        print("2. Medium (Some Strategy)")
        print("3. Hard (Unbeatable AI)")
        
        while True:
            try:
                choice = input("Enter difficulty (1-3): ")
                if choice == '1':
                    self.difficulty = 'easy'
                    print("Easy mode selected!")
                elif choice == '2':
                    self.difficulty = 'medium'
                    print("Medium mode selected!")
                elif choice == '3':
                    self.difficulty = 'hard'
                    print("Hard mode selected! Good luck!")
                else:
                    print("Invalid choice. Try again.")
                    continue
                break
            except ValueError:
                print("Please enter a number between 1-3.")

    def is_winner(self, board, letter):
        """Check for winning combinations."""
        winning_combos = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
            [0, 4, 8], [2, 4, 6]  # diagonals
        ]
        return any(all(board[i] == letter for i in combo) for combo in winning_combos)

    def get_ai_move(self):
        """Intelligent move selection based on difficulty."""
        available_moves = [i for i, spot in enumerate(self.board) if spot == ' ']
        
        if self.difficulty == 'easy':
            return random.choice(available_moves)
        
        if self.difficulty == 'medium':
            # 70% chance of smart move, 30% random
            if random.random() < 0.7:
                return self.minimax_move()
            return random.choice(available_moves)
        
        # Hard mode: Always best move
        return self.minimax_move()

    def minimax_move(self):
        """Minimax algorithm for optimal move selection."""
        best_score = -math.inf
        best_move = None
        
        for move in [i for i, spot in enumerate(self.board) if spot == ' ']:
            self.board[move] = 'X'
            score = self.minimax(0, False)
            self.board[move] = ' '
            
            if score > best_score:
                best_score = score
                best_move = move
        
        return best_move

    def minimax(self, depth, is_maximizing):
        """Recursive minimax algorithm with alpha-beta pruning."""
        if self.is_winner(self.board, 'X'):
            return 1
        if self.is_winner(self.board, 'O'):
            return -1
        if ' ' not in self.board:
            return 0

        if is_maximizing:
            best_score = -math.inf
            for move in [i for i, spot in enumerate(self.board) if spot == ' ']:
                self.board[move] = 'X'
                score = self.minimax(depth + 1, False)
                self.board[move] = ' '
                best_score = max(best_score, score)
            return best_score
        else:
            best_score = math.inf
            for move in [i for i, spot in enumerate(self.board) if spot == ' ']:
                self.board[move] = 'O'
                score = self.minimax(depth + 1, True)
                self.board[move] = ' '
                best_score = min(best_score, score)
            return best_score

    def play(self):
        """Main game loop with user experience."""
        # Clear screen and show welcome
        self.clear_screen()
        self.print_welcome_banner()
        
        # Set difficulty
        self.set_difficulty()
        
        # Set first player as human
        current_player = 'human'
        print("\nYou start the game!")
        time.sleep(1)
        
        # Game loop
        while True:
            self.print_board()
            
            if current_player == 'human':
                # Human turn
                while True:
                    try:
                        move = input("Your move (0-8): ")
                        move = int(move)
                        if 0 <= move <= 8 and self.board[move] == ' ':
                            break
                        print("Invalid move! Try again.")
                    except (ValueError, IndexError):
                        print("Please enter a number between 0-8.")
                
                self.board[move] = 'O'
                
                if self.is_winner(self.board, 'O'):
                    self.print_board()
                    print("Congratulations! You won!")
                    break
            
            else:
                # AI turn
                print("AI is thinking...")
                time.sleep(random.uniform(0.5, 1.5))  # Simulate thinking time
                
                move = self.get_ai_move()
                self.board[move] = 'X'
                
                if self.is_winner(self.board, 'X'):
                    self.print_board()
                    print("AI wins! Better luck next time.")
                    break
            
            # Check for tie
            if ' ' not in self.board:
                self.print_board()
                print("It's a tie!")
                break
            
            # Switch players
            current_player = 'ai' if current_player == 'human' else 'human'

        # Play again option
        play_again = input("\nWant to play again? (yes/no): ").lower()
        if play_again in ['yes', 'y']:
            # Reset the board and start a new game
            self.__init__()
            self.play()
        else:
            print("Thanks for playing! Goodbye!")

# Run the game
if __name__ == "__main__":
    game = TicTacToeAI()
    game.play()
